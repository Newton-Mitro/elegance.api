generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// ===========================
// üë§ USERS
// ===========================
// enum UserRole {
//   ADMIN
//   MANAGER
//   RECEPTIONIST
//   STYLIST
//   CUSTOMER
// }
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// User table for both customers and staff
model User {
  id                String     @id @default(uuid())
  name              String?
  phone             String     @unique
  email             String?    @unique
  profilePictureUrl String?
  password          String
  status            UserStatus
  createdAt         DateTime   @default(now())

  // Relationships
  invoices     Invoice[]
  appointments Appointment[]
  LoyaltyPoint LoyaltyPoint[]
  Sale         Sale[]
  Refund       Refund[]
  refreshToken RefreshToken?
  auditLogs    AuditLog[]
  userRoles    UserRoles[] // Many-to-many via UserRoles
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  // Relationships
  userRoles UserRoles[] // Many-to-many via UserRoles
}

model UserRoles {
  userId String
  roleId String

  // Relationships
  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId]) // Composite primary key
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ===========================
// üßñ SERVICE & CATEGORIES
// ===========================
model ServiceCategory {
  id       String    @id @default(uuid())
  name     String    @unique // e.g. "HAIR"
  nameBn   String? // e.g. "‡¶ö‡ßÅ‡¶≤‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ"
  services Service[]
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  nameBn      String?
  description String?
  categoryId  String
  price       Decimal
  durationMin Int
  createdAt   DateTime @default(now())

  category           ServiceCategory      @relation(fields: [categoryId], references: [id])
  AppointmentService AppointmentService[]
}

// ===========================
// üìÖ APPOINTMENTS
// ===========================

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Appointment {
  id              String            @id @default(uuid())
  userId          String? // Nullable userId for walk-in customers
  appointmentTime DateTime // Scheduled appointment time
  isWalkIn        Boolean           @default(false) // If the appointment is a walk-in
  status          AppointmentStatus @default(SCHEDULED)
  createdAt       DateTime          @default(now())

  invoice  Invoice?
  services AppointmentService[]
  user     User?                @relation(fields: [userId], references: [id]) // Nullable user relation for walk-ins
}

model AppointmentService {
  id            String  @id @default(uuid())
  appointmentId String
  serviceId     String
  price         Decimal // Store the price at time of booking

  service     Service     @relation(fields: [serviceId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

// ===========================
// üßæ INVOICE FOR SERVICES
// ===========================
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Invoice table for managing payments for appointments
model Invoice {
  id             String        @id @default(uuid())
  userId         String?
  appointmentId  String        @unique
  totalAmount    Decimal
  paidAmount     Decimal       @default(0)
  dueAmount      Decimal?      @default(0) // optional for clarity
  discountAmount Decimal       @default(0)
  loyaltyUsed    Int           @default(0)
  paymentMethod  String?
  paymentStatus  PaymentStatus @default(PENDING)
  paymentDate    DateTime?
  createdAt      DateTime      @default(now())

  vatPercentage Float
  vatAmount     Decimal

  user        User?       @relation(fields: [userId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  Refund      Refund[]
}

// ===========================
// üß¥ Purchase
// ===========================
model Vendor {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())

  purchaseOrders PurchaseOrder[]
  payments       VendorPayment[]
}

model PurchaseOrder {
  id        String         @id @default(uuid())
  vendorId  String
  totalCost Decimal
  status    PurchaseStatus @default(PENDING)
  createdAt DateTime       @default(now())

  vendor Vendor              @relation(fields: [vendorId], references: [id])
  items  PurchaseOrderItem[]
}

enum PurchaseStatus {
  PENDING
  APPROVED
  RECEIVED
  CANCELLED
}

model PurchaseOrderItem {
  id              String  @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

model VendorPayment {
  id       String   @id @default(uuid())
  vendorId String
  amount   Decimal
  method   String
  paidAt   DateTime @default(now())

  vendor Vendor @relation(fields: [vendorId], references: [id])
}

// ===========================
// üß¥ PRODUCTS & INVENTORY
// ===========================
model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  price       Decimal
  stock       Int // Available stock
  categoryId  String

  SaleProduct          SaleProduct[]
  InventoryStock       InventoryStock[]
  InventoryTransaction InventoryTransaction[]
  category             ProductCategory        @relation(fields: [categoryId], references: [id])
  RefundItem           RefundItem[]
  PurchaseOrderItem    PurchaseOrderItem[]
}

model InventoryStock {
  id            String    @id @default(uuid())
  productId     String
  batchNumber   String?
  quantity      Int
  purchasePrice Decimal
  salePrice     Decimal
  expiryDate    DateTime?
  addedAt       DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  InventoryTransaction InventoryTransaction[]
  product              Product                @relation(fields: [productId], references: [id])
}

enum InventoryTransactionType {
  PURCHASE
  SALE
  REFUND
  ADJUSTMENT
  EXPIRY
}

model InventoryTransaction {
  id         String                   @id @default(uuid())
  productId  String
  batchCode  String?
  type       InventoryTransactionType
  quantity   Int
  costPrice  Decimal
  note       String?
  relatedRef String? // e.g. saleId, refundId
  createdAt  DateTime                 @default(now())

  product          Product         @relation(fields: [productId], references: [id])
  InventoryStock   InventoryStock? @relation(fields: [inventoryStockId], references: [id])
  inventoryStockId String?
}

// ===========================
// üõçÔ∏è SALES
// ===========================
model Sale {
  id            String        @id @default(uuid())
  customerId    String?
  totalAmount   Decimal // Total price of the sale
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String? // Payment method like 'cash', 'credit', 'debit', etc.
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  products SaleProduct[] // Products involved in the sale
  customer User?         @relation(fields: [customerId], references: [id])
  Refund   Refund[]
}

// SaleProduct model (for many-to-many relationship with product)
model SaleProduct {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Int // Quantity sold
  price     Decimal // Price at the time of sale

  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// ===========================
// üîÅ REFUNDS
// ===========================

enum RefundStatus {
  REQUESTED
  APPROVED
  REJECTED
  REFUNDED
}

model Refund {
  id             String       @id @default(uuid())
  customerId     String?
  saleId         String? // For product sale refund
  invoiceId      String? // For appointment refund
  refundedAmount Decimal
  reason         String?
  status         RefundStatus @default(REQUESTED)
  createdAt      DateTime     @default(now())

  journalEntryId String?
  RefundItem     RefundItem[]
  journal        JournalEntry? @relation(fields: [journalEntryId], references: [id])
  sale           Sale?         @relation(fields: [saleId], references: [id])
  invoice        Invoice?      @relation(fields: [invoiceId], references: [id])
  customer       User?         @relation(fields: [customerId], references: [id])
}

model RefundItem {
  id        String  @id @default(uuid())
  refundId  String
  productId String
  quantity  Int
  price     Decimal

  refund  Refund  @relation(fields: [refundId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// ===========================
// üí∞ LOYALTY
// ===========================

model LoyaltyPoint {
  id        String   @id @default(uuid())
  userId    String
  points    Int      @default(0) // Points earned by the user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// ===========================
// üéÅ DISCOUNTS
// ===========================
model Discount {
  id         String   @id @default(uuid())
  code       String   @unique // Discount code (e.g., 'SUMMER20', 'MEMBER', 'NON_MEMBER', 'NEW_YEAR', 'WOMANS_DAY')
  percentage Float // Discount percentage (e.g., 10 means 10% off)
  startDate  DateTime // When the discount is valid from
  endDate    DateTime // When the discount is valid until
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
}

// ===========================
// üìí ACCOUNTING SYSTEM
// ===========================
// Account types
enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

// Chart of Accounts (like Cash, Sales, Inventory)
model Account {
  id             String      @id @default(uuid())
  name           String
  code           String      @unique
  type           AccountType
  parentId       String?
  isGroup        Boolean     @default(false)
  openingBalance Decimal     @default(0)
  createdAt      DateTime    @default(now())

  parent   Account?  @relation("AccountHierarchy", fields: [parentId], references: [id])
  children Account[] @relation("AccountHierarchy")

  entries JournalEntry[]
}

// Voucher types
enum VoucherType {
  PAYMENT
  RECEIPT
  JOURNAL
  CONTRA
  ADJUSTMENT
}

// Voucher status
enum VoucherStatus {
  PENDING
  APPROVED
  CANCELLED
}

// Voucher (a transaction like a payment or receipt)
model Voucher {
  id        String        @id @default(uuid())
  type      VoucherType
  status    VoucherStatus @default(PENDING)
  date      DateTime      @default(now())
  reference String? // Optional external ref (e.g., invoice ID)
  narration String?
  createdAt DateTime      @default(now())

  entries JournalEntry[]
}

// Journal Entry (double-entry line: debit or credit)
model JournalEntry {
  id        String   @id @default(uuid())
  voucherId String
  accountId String
  debit     Decimal  @default(0)
  credit    Decimal  @default(0)
  memo      String?
  createdAt DateTime @default(now())

  voucher Voucher  @relation(fields: [voucherId], references: [id])
  account Account  @relation(fields: [accountId], references: [id])
  Refund  Refund[]
}

// ++++++++++++++++++++++++++++++++++++++++++++
// Audit Log
// ++++++++++++++++++++++++++++++++++++++++++++

enum ActionStatus {
  SUCCESS
  FAILED
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  VIEW
  REPORT_VIEW
}

model AuditLog {
  id                String       @id @default(uuid())
  actionType        ActionType
  entityType        String?
  entityId          String?
  actionTakenBy     String
  actionDescription String
  ipAddress         String?
  actionStatus      ActionStatus @default(FAILED)
  actionDate        DateTime     @default(now())

  // Relationship
  user User @relation(fields: [actionTakenBy], references: [id])
}
